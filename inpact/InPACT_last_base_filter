#!/usr/bin/env python

import os
import sys
import argparse
import logging
import numpy as np
import pandas as pd
from multiprocessing import Pool
os.environ["NUMEXPR_MAX_THREADS"]="5"

# logging
logging.basicConfig(format='%(asctime)s: %(message)s',
                    datefmt = '%Y-%m-%d %H:%M')
log = logging.getLogger()
log.setLevel(logging.INFO)

def getPolyaLoc(row):
    gene,chrom,iv_start,iv_end,strand = row[0:5]
    if strand == "+":
        pa_loc = iv_end
    elif strand == "-":
        pa_loc = iv_start
    pa_start = pa_loc - 1
    pa_end = pa_loc
    pa_region = pd.Series([chrom,pa_start,pa_end,gene,".",strand])
    pa_region = pd.Series(pa_region)
    return pa_region

def parallFunc(df):
    return df.apply(getPolyaLoc,axis=1)

def parallelGetRegions(rt_target,
                       parallFunc,
                       parallel_number):
    log.info("Start : Get polyA sites")
    rt_target_split = np.array_split(rt_target,parallel_number)
    # parallel
    pool = Pool(parallel_number)
    rt_target_result = pd.concat(pool.map(parallFunc,rt_target_split))
    pool.close()
    pool.join()
    log.info("Done : Get polyA sites")
    return rt_target_result

def getFilterdPolyA(count_file,
                    parallFunc,
                    count_thresh,
                    parallel_number,
                    bed_out):
    rt_count = pd.read_table(count_file,comment="#")
    number_before = rt_count.shape[0]
    log.info("Before filtering : %d" % number_before)
    # filter
    rt_count_filter = rt_count.loc[rt_count.iloc[:,6] > count_thresh,]
    rt_count_filter = rt_count_filter.reset_index(drop=True)
    number_after = rt_count_filter.shape[0]
    log.info("After filtering : %d" % number_after)
    # extradt polyA
    pa_df = parallelGetRegions(rt_count_filter,parallFunc,parallel_number)
    pa_df.to_csv(bed_out,sep="\t",index=False,header=False)
    log.info("Save " + bed_out)
    return

def create_parser(name):
    p = argparse.ArgumentParser( 
            prog=name,
            formatter_class=argparse.ArgumentDefaultsHelpFormatter,
            description='Filter exons based on count of last base.')
    # input and output
    g = p.add_argument_group('input')
    g.add_argument(
            '--count_file',
            type = str,
            help='Count file')
    g.add_argument(
            '--count_thresh',
            help='Thresh of count',
            type=int,
            default=0)
    g.add_argument(
            '--out_put',
            help='Output file',
            type=str,
            default="2.filtered.polyA.bed")
    g.add_argument(
            '--num_core',
            help='Parallel number',
            type=int,
            default=5)
    return p

# parse args
args = sys.argv
parser = create_parser(args[0])
args = parser.parse_args(args[1:])
num_core = args.num_core
count_thresh = args.count_thresh
count_file = args.count_file
save_file = args.out_put
# run
log.info("#"*25 + "Start:Filter last base" + "#"*25)
log.info("Parameter:")
log.info(args)
log.info("-"*30)
getFilterdPolyA(count_file,
                parallFunc,
                count_thresh,
                num_core,
                save_file)
log.info("-"*25 + "Done:Filter last base" + "-"*25)

